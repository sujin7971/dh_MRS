-- --------------------------------------------------------
-- 호스트:                          127.0.0.1
-- 서버 버전:                        10.3.32-MariaDB - mariadb.org binary distribution
-- 서버 OS:                        Win64
-- HeidiSQL 버전:                  11.2.0.6213
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- ewp_plms 데이터베이스 구조 내보내기
CREATE DATABASE IF NOT EXISTS `ewp_plms` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */;
USE `ewp_plms`;

-- 트리거 ewp_plms.TR_ASSIGN_APPROVAL_APPYN_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_ASSIGN_APPROVAL_APPYN_AF_UPDATE` AFTER UPDATE ON `assign_approval` FOR EACH ROW BEGIN
	/* 결재 요청 처리가 완료된 경우 해당 사용신청에 대한 스케줄이 DB 에 등록되 있으면 해당 칼럼의 결재 상태를 처리 내용과 동기화 */
	/* 결재 요청이 삭제 요청(-1) 인 경우 해당 사용신청에 대해 삭제 처리 */
	DECLARE _MEETING_ID INTEGER;
	DECLARE _APP_STATUS INTEGER;
	/*결재 처리에 성공한 경우*/
	IF NEW.successYN = 'Y'
	 	THEN 
	 		IF NEW.appStatus = -1 
				THEN UPDATE meeting_schedule SET delYN = 'Y', skdStatus = NEW.appStatus, skdComment = NEW.appComment WHERE skdKey = NEW.skdKey;
			ELSE 
				SELECT meetingKey, skdStatus INTO _MEETING_ID, _APP_STATUS
				FROM meeting_schedule
				WHERE skdKey = NEW.skdKey;
				
				IF _APP_STATUS = NEW.appStatus
					THEN CALL PROC_UPDATE_MEETING_INFO_STATUS(_MEETING_ID, _APP_STATUS);
				ELSE
					UPDATE meeting_schedule 
		 			SET skdStatus = NEW.appStatus, skdComment = NEW.appComment
		 			WHERE skdKey = NEW.skdKey;
		 		END IF;
		 	END IF;
	/*결재 처리에 실패한 경우 코멘트만 업데이트*/	 	
	ELSE 
		UPDATE meeting_schedule 
		 		SET skdComment = NEW.appComment
		 		WHERE skdKey = NEW.skdKey;
 	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_BOARD_NOTICE_AF_DELETE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_BOARD_NOTICE_AF_DELETE` AFTER DELETE ON `board_notice` FOR EACH ROW BEGIN
	DELETE FROM drive_file_relation WHERE relatedEntityId = OLD.noticeId AND relatedEntityType = 21;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_BOARD_NOTICE_DELYN_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_BOARD_NOTICE_DELYN_AF_UPDATE` AFTER UPDATE ON `board_notice` FOR EACH ROW BEGIN
	IF NEW.delYN = 'Y'
	THEN DELETE FROM drive_file_relation WHERE relatedEntityId = OLD.noticeId AND relatedEntityType = 21;
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_DRIVE_FILE_INFO_AF_DELETE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_DRIVE_FILE_INFO_AF_DELETE` AFTER DELETE ON `drive_file_info` FOR EACH ROW BEGIN
	DELETE FROM drive_file_cvt WHERE fileId = OLD.fileId;
	DELETE FROM drive_file_relation WHERE fileId = OLD.fileId;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_DRIVE_FILE_INFO_AF_INSERT 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_DRIVE_FILE_INFO_AF_INSERT` AFTER INSERT ON `drive_file_info` FOR EACH ROW BEGIN
	IF NEW.fileStatus = 100 AND NEW.fileCategory != 'PDF' THEN
		IF NEW.fileCategory = 'IMG' AND NEW.webpGeneratedYN = 'N'
    	THEN
	    	INSERT INTO drive_file_cvt (fileId, conversionType)
			VALUES (
		   	NEW.fileId,
		      'IMAGE_TO_WEBP'
			);
		ELSEIF NEW.fileCategory IN ('HWP', 'PPT', 'EXCEL', 'WORD') AND NEW.pdfGeneratedYN = 'N'
		THEN
			INSERT INTO drive_file_cvt (fileId, conversionType)
			VALUES (
		      NEW.fileId,
		      'DOC_TO_PDF'
			);
		END IF;
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_DRIVE_FILE_INFO_DELYN_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_DRIVE_FILE_INFO_DELYN_AF_UPDATE` AFTER UPDATE ON `drive_file_info` FOR EACH ROW BEGIN
	IF NEW.delYN = 'Y'
	THEN 
		DELETE FROM drive_file_cvt WHERE fileId = OLD.fileId;
		DELETE FROM drive_file_relation WHERE fileId = OLD.fileId;
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_ATTENDEE_BF_INSERT 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_ATTENDEE_BF_INSERT` BEFORE INSERT ON `meeting_attendee` FOR EACH ROW BEGIN
	/* 참석자 ROW를 추가하기 전에 임시 비밀번호와 만료 기간을 설정 */
	DECLARE _TEMP_PW VARCHAR(50);
	DECLARE _EXP_DATE DATE;
	DECLARE _MEETING_ID INTEGER;
	DECLARE _USER_ID VARCHAR(50);
	
	/* 만료일자는 대상 회의 스케줄의 예정일자 */
	SET _EXP_DATE = (SELECT holdingDate FROM meeting_schedule WHERE meetingKey = NEW.meetingKey);
	/* 임시 비밀번호는 동일 만료일자에 해당 사용자의 참석자로서 참가하는 회의가 있고 비밀번호가 발급 된 경우 동일 비밀번호 사용 */
	SET _TEMP_PW = (SELECT DISTINCT tempPW
	FROM meeting_attendee
	WHERE expireDate = _EXP_DATE
	AND userKey = NEW.userKey
	AND tempPW IS NOT NULL
	);
	/* 기존 발급된 비밀번호가 없는 경우 새로 발급 */
	IF _TEMP_PW IS NULL THEN SET _TEMP_PW = CONCAT("EWP", LEFT(UUID(), 5));
	END IF;
	
	SET NEW.tempPW = _TEMP_PW;
	SET NEW.expireDate = _EXP_DATE;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_FILE_INFO_AF_DELETE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_FILE_INFO_AF_DELETE` AFTER DELETE ON `meeting_file_info` FOR EACH ROW BEGIN
	DELETE FROM meeting_file_cvt WHERE fileKey = OLD.fileKey;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_FILE_INFO_AF_INSERT 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_FILE_INFO_AF_INSERT` AFTER INSERT ON `meeting_file_info` FOR EACH ROW BEGIN
	DECLARE _FILE_ID INTEGER;
	DECLARE _MEETING_ID INTEGER;
	DECLARE _FILE_ROLE VARCHAR(50);
	DECLARE _MEETING_STATUS VARCHAR(50);
	DECLARE _PRIORITY INTEGER;
	
	SET _FILE_ID = NEW.fileKey;
	SET _MEETING_ID = NEW.meetingKey;
	SET _FILE_ROLE = NEW.roleType;
	SET _MEETING_STATUS = (SELECT meetingStatus FROM meeting_info WHERE meetingKey = _MEETING_ID);
	
	IF _FILE_ROLE = "MATERIAL" THEN
		SET _PRIORITY = FUNC_GET_CVT_PRIORITY(_MEETING_STATUS);
	ELSEIF _FILE_ROLE = "COPY" OR _FILE_ROLE = "MEMO" THEN
		SET _PRIORITY = 0;
	ELSE SET _PRIORITY = -1;/* 원본파일, 판서본, 메모 제외 변환 처리 하지 않음 */
	END IF;
	
	IF _PRIORITY != -1 THEN
		INSERT INTO meeting_file_cvt(meetingKey, fileKey, cvtPriority)
		VALUES (_MEETING_ID, _FILE_ID, _PRIORITY);
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_FILE_INFO_DELYN_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_FILE_INFO_DELYN_AF_UPDATE` AFTER UPDATE ON `meeting_file_info` FOR EACH ROW BEGIN
	IF NEW.delYN = 'Y'
	THEN DELETE FROM meeting_file_cvt WHERE fileKey = NEW.fileKey;
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_INFO_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_INFO_AF_UPDATE` AFTER UPDATE ON `meeting_info` FOR EACH ROW BEGIN
	/*
	* 진행이 종료된 회의가 기밀회의인경우, 등록된 모든 자료를 삭제처리
	*/
	IF NEW.meetingStatus = 'END' AND NEW.secretYN = 'Y'
		THEN UPDATE meeting_file_info SET delYN = 'Y' WHERE meetingKey = NEW.meetingKey;
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_SCHEDULE_AF_DELETE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_SCHEDULE_AF_DELETE` AFTER DELETE ON `meeting_schedule` FOR EACH ROW BEGIN
	DELETE FROM meeting_info WHERE meetingKey = OLD.meetingKey;
	DELETE FROM meeting_attendee WHERE meetingKey = OLD.meetingKey;
	DELETE FROM meeting_report WHERE meetingKey = OLD.meetingKey;
	DELETE FROM meeting_report_opn WHERE meetingKey = OLD.meetingKey;
	UPDATE meeting_file_info SET delYN = 'Y', expDateTime = DATE_ADD(NOW(), INTERVAL 30 DAY) WHERE meetingKey = OLD.meetingKey;
	DELETE perm, grp FROM meeting_permission perm JOIN meeting_grp_permission grp ON perm.permId = grp.permId WHERE grp.meetingId = OLD.meetingKey;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_SCHEDULE_AF_INSERT 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_SCHEDULE_AF_INSERT` AFTER INSERT ON `meeting_schedule` FOR EACH ROW BEGIN
/* 새로 등록된 스케줄에 대한 기본적인 권한 발급 처리 */
	CALL PROC_CERT_MEETING_DEFAULT_AUTH(NEW.writerKey, NEW.meetingKey);
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_SCHEDULE_DELYN_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_SCHEDULE_DELYN_AF_UPDATE` AFTER UPDATE ON `meeting_schedule` FOR EACH ROW BEGIN
	IF NEW.delYN != OLD.delYN
	THEN
		UPDATE meeting_info SET delYN = NEW.delYN, stickyBit = 0 WHERE meetingKey = NEW.meetingKey;
		UPDATE meeting_attendee SET delYN = NEW.delYN WHERE meetingKey = NEW.meetingKey;
		DELETE FROM meeting_report WHERE meetingKey = NEW.meetingKey;
		UPDATE meeting_report_opn SET delYN = NEW.delYN WHERE meetingKey = NEW.meetingKey;
		UPDATE meeting_file_info SET delYN = NEW.delYN, expDateTime = DATE_ADD(NOW(), INTERVAL 30 DAY) WHERE meetingKey = NEW.meetingKey;
		DELETE perm, grp FROM meeting_permission perm JOIN meeting_grp_permission grp ON perm.permId = grp.permId WHERE grp.meetingId = OLD.meetingKey;
	END IF;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- 트리거 ewp_plms.TR_MEETING_SCHEDULE_STATUS_AF_UPDATE 구조 내보내기
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER //
CREATE TRIGGER `TR_MEETING_SCHEDULE_STATUS_AF_UPDATE` AFTER UPDATE ON `meeting_schedule` FOR EACH ROW BEGIN
	IF NEW.skdStatus != OLD.skdStatus
	THEN 
		CALL PROC_UPDATE_MEETING_INFO_STATUS(NEW.meetingKey, NEW.skdStatus);
	END IF;
	IF NEW.skdStatus = 3 OR NEW.skdStatus = 4
	THEN
		UPDATE meeting_file_info SET delYN = 'Y', expDateTime = DATE_ADD(NOW(), INTERVAL 30 DAY) WHERE meetingKey = NEW.meetingKey;
	END IF; 
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;
