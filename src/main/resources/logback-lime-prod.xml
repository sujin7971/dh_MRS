<?xml version="1.0" encoding="UTF-8"?> 
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds"> 
<!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다. -->
	<!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다. -->
	<springProperty scope="context" name="LOG_LEVEL" source="logging.level.root" /> 
	
	<springProfile name="lime-dev">
		<property name="LOG_ROOT_PATH" value="C:/B-PLMS/lime/logs" /> 
		<!-- pattern -->
		<property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n" /> 
	</springProfile>
	<springProfile name="lime-publish">
		<property name="LOG_ROOT_PATH" value="C:/B-PLMS/lime/logs" /> 
		<!-- pattern -->
		<property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss} [%logger{0}:%line] - %msg%n" /> 
	</springProfile>
	
	<springProfile name="lime-server-embeded">
		<property resource="logback\lime\embeded.properties" />
		<property name="LOG_FOLDER" value="embeded" /> 
		<!-- JDBC -->
		<property name="JDBC_LEVEL" value="${LOG_LEVEL}" />
	</springProfile>
	<springProfile name="lime-server-user">
		<property resource="logback\lime\user.properties" />
		<property name="LOG_FOLDER" value="user" /> 
		<!-- JDBC -->
		<property name="JDBC_LEVEL" value="${LOG_LEVEL}" />
	</springProfile>
	<springProfile name="lime-server-admin">
		<property resource="logback\lime\admin.properties" />
		<property name="LOG_FOLDER" value="admin" /> 
		<!-- JDBC -->
		<property name="JDBC_LEVEL" value="${LOG_LEVEL}" />
	</springProfile>
	<springProfile name="lime-server-converter">
		<property resource="logback\lime\converter.properties" />
		<property name="LOG_FOLDER" value="converter" /> 
		<!-- JDBC -->
		<property name="JDBC_LEVEL" value="${LOG_LEVEL}" />
	</springProfile>
	
	
	<!-- log file path -->
	<property name="LOG_PATH" value="${LOG_ROOT_PATH}/${LOG_FOLDER}" />
	
	<property name="CONSOLE_LOG_ENABLED" value="${log.console.enabled}" /> 
	<!-- common log file config -->
	<property name="COMMON_LOG_FILE_NAME" value="common" /> 
	<property name="COMMON_LOG_ENABLED" value="${log.common.enabled}" /> 
	<!-- err log file config -->
	<property name="ERR_LOG_FILE_NAME" value="error" />
	<property name="ERR_LOG_ENABLED" value="${log.error.enabled}" /> 
	<!-- login log file config -->
	<property name="LOGIN_LOG_FILE_NAME" value="login" />
	<property name="LOGIN_LOG_ENABLED" value="${log.login.enabled}" /> 
	<!-- cvt log file config -->
	<property name="CVT_LOG_FILE_NAME" value="cvt" />  
	<property name="CVT_LOG_ENABLED" value="${log.cvt.enabled}" />   
	<!-- batch log file config -->
	<property name="BATCH_LOG_FILE_NAME" value="batch" /> 
	<property name="BATCH_LOG_ENABLED" value="${log.batch.enabled}" />  
	<!-- db log file config -->
	<property name="DB_LOG_FILE_NAME" value="db" />  
	<property name="DB_LOG_ENABLED" value="${log.db.enabled}" />   
	
	<!-- Console Appender -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<if condition="!${CONSOLE_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<filter class="egov.framework.plms.main.core.log.LogbackQueryFilter"/>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender> 
	<!-- File Appender -->
	<appender name="COMMON" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
		<if condition="!${COMMON_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>DENY</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<filter class="egov.framework.plms.main.core.log.LogbackQueryFilter"/>
		<!-- 파일경로 설정 -->
		<file>${LOG_PATH}/${COMMON_LOG_FILE_NAME}.log</file>
		<!-- 출력패턴 설정 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${COMMON_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>180</maxHistory>
			<!--<MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex> -->
		</rollingPolicy>
	</appender> 
	
	<!-- 에러의 경우 파일에 로그 처리 -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<if condition="!${ERR_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>180</maxHistory>
		</rollingPolicy>
	</appender>
	
	<!-- 로그인 처리 정보에 대한 경우 파일에 로그 처리 -->
	<appender name="LOGIN" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<if condition="!${LOGIN_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<file>${LOG_PATH}/${LOGIN_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${LOGIN_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>180</maxHistory>
		</rollingPolicy>
	</appender>
	
	<!-- 변환 처리 정보에 대한 경우 파일에 로그 처리 -->
	<appender name="CVT" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<if condition="!${CVT_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<file>${LOG_PATH}/${CVT_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${CVT_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>180</maxHistory>
		</rollingPolicy>
	</appender>
	
	<!-- 변환 처리 정보에 대한 경우 파일에 로그 처리 -->
	<appender name="BATCH" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<if condition="!${BATCH_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<file>${LOG_PATH}/${BATCH_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${BATCH_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>180</maxHistory>
		</rollingPolicy>
	</appender> 
	
	<!-- 변환 처리 정보에 대한 경우 파일에 로그 처리 -->
	<appender name="DB" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<if condition="!${DB_LOG_ENABLED}"><then>
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
		        <level>OFF</level>
		    </filter>
		</then></if>
		<filter class="egov.framework.plms.main.core.log.LogbackQueryFilter"/>
		<file>${LOG_PATH}/${DB_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder> 
		
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
			<!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
			<fileNamePattern>${LOG_PATH}/${DB_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<!-- 파일당 최고 용량 kb, mb, gb -->
				<maxFileSize>500MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy> 
			<!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
			<maxHistory>180</maxHistory>
		</rollingPolicy>
	</appender> 
	
	<!-- root레벨 설정 -->
	<root level="${LOG_LEVEL}">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="COMMON" />
		<appender-ref ref="ERROR" />
	</root> 
	
	<!-- 동서 로그인 패키지 로깅레벨 설정 -->
	<logger name="egov.framework.plms.sub.lime.mvc.controller.common.LoginController" level="INFO" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGIN" />
		<appender-ref ref="ERROR" />
	</logger>
	
	<!-- 동서 로그인 패키지 로깅레벨 설정 -->
	<logger name="egov.framework.plms.sub.lime.component.login" level="INFO" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGIN" />
		<appender-ref ref="ERROR" />
	</logger>
	
	<!-- 변환패키지 로깅레벨 설정 -->
	<logger name="egov.framework.plms.main.component.converter" level="DEBUG" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="CVT" />
		<appender-ref ref="ERROR" />
	</logger>

	<!-- 공통 배치패키지 로깅레벨 설정 -->
	<logger name="egov.framework.plms.main.component.scheduler" level="INFO" additivity="false">
		<appender-ref ref="BATCH" />
		<appender-ref ref="ERROR" />
	</logger>
	
	<!-- 동서 배치패키지 로깅레벨 설정 -->
	<logger name="egov.framework.plms.sub.lime.component.scheduler" level="INFO" additivity="false">
		<appender-ref ref="BATCH" />
		<appender-ref ref="ERROR" />
	</logger>
	
	<!-- log4jdbc 옵션 설정 --> 
	<logger name="jdbc" level="OFF"/> 
	<!-- 커넥션 open close 이벤트를 로그로 남긴다. --> 
	<logger name="jdbc.connection" level="OFF"/> 
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
	<logger name="jdbc.sqlonly" level="OFF"/> 
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 콘솔에만 출력하기 위해 additivity 옵션을 false로 설정--> 
	<logger name="jdbc.sqltiming" level="${JDBC_LEVEL}" additivity="false">
		<!-- JDBC 로그는 콘솔 및 db 로그 파일에 출력 -->
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="DB" />
		<appender-ref ref="ERROR" />
	</logger> 
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. --> 
	<logger name="jdbc.audit" level="OFF"/>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. --> 
	<logger name="jdbc.resultset" level="OFF"/> 
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. --> 
	<logger name="jdbc.resultsettable" level="OFF"/> 

</configuration>